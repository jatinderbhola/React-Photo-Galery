{"version":3,"sources":["pages/homepage/homepage.component.jsx","http-common.js","services/PhotoDataService.js","redux/Image/image.types.js","redux/Image/image.actions.js","components/photo-gallery-grid/photo-gallery-grid.component.jsx","components/popup-model/popup.component.jsx","services/WebsiteDateService.js","components/share-me/share-me.component.jsx","components/footer/footer.component.jsx","components/spinner/spinner-with-love.component.jsx","App.js","redux/Image/image.reducer.js","redux/rootReducers.js","middleware/logger.js","redux/store.js","index.js"],"names":["HomePage","className","axios","create","baseURL","headers","http","get","SET_IMAGES","CLEAR_SELECTED","SET_SELECTED","PENDING_IMAGE_APPROVAL","clearSelected","type","PhotoGalleryGrid","PhotoDataService","getAll","then","res","props","setImages","data","photos","catch","err","console","log","images","this","backdropClosesModal","onSelectImage","setSelected","lightboxWidth","Component","connect","state","image","dispatch","index","PopUp","setPopUp","selectedCount","onClick","value","disabled","id","post","ShareMe","timeout","connectInterval","ws","WebSocket","that","onopen","setState","clearTimeout","onclose","e","Math","min","reason","setTimeout","check","onerror","error","message","close","onmessage","event","pendingImageApproval","count","readyState","CLOSED","togglePopUp","isVisible","popUp","selectedImages","filter","isSelected","length","toast","warn","promises","map","WebsiteDateService","Promise","allSettled","results","forEach","result","status","response","autoClose","icon","faShare","size","title","action","process","Footer","faTimes","faUser","SpinnerWithLove","App","React","INITIAL_STATE","reducer","slice","Object","prototype","hasOwnProperty","call","success","rootReducer","combineReducers","imageReducer","logger","store","next","group","info","getState","groupEnd","middlewareEnhancer","applyMiddleware","loggerMiddleware","thunkMiddleware","composedEnhancers","compose","createStore","undefined","ReactDOM","render","Fragment","document","getElementById"],"mappings":"8UAeeA,EAXE,kBACf,sBAAKC,UAAU,WAAf,UACE,2DAGA,uG,QCPWC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,yBACTC,QAAS,CACL,eAAgB,sBCKT,M,sFANX,WACI,OAAOC,EAAKC,IAAI,e,uCCJXC,EAAa,aACbC,EAAiB,iBACjBC,EAAe,eACfC,EAAyB,yBCKzBC,EAAgB,WACzB,MAAO,CACHC,KAAMJ,ICGRK,E,kDAEF,aAAe,wC,qDAIf,WAAqB,IAAD,OAChBC,EAAiBC,SACZC,MAAK,SAAAC,GACF,EAAKC,MAAMC,UAAUF,EAAIG,KAAKC,WAEjCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,oBAGlC,WACI,OACI,qBAAKvB,UAAU,aAAf,SACI,cAAC,IAAD,CACA0B,OAAQC,KAAKT,MAAMQ,OACnBE,qBAAqB,EACrB5B,UAAU,QACV6B,cAAeF,KAAKT,MAAMY,YAC1BC,cAAe,a,GAtBAC,aA4CdC,eAbO,SAAAC,GACpB,MAAO,CACHR,OAAQQ,EAAMC,MAAMT,WAIC,SAAAU,GACzB,MAAO,CACHjB,UAAW,SAACO,GAAD,OAAYU,EDnDN,SAACV,GACtB,MAAO,CACHd,KAAML,EACNmB,OAAQA,GCgDwBP,CAAUO,KAC1CI,YAAa,SAACO,GAAD,OAAWD,EDvCL,SAACC,GACxB,MAAO,CACHzB,KAAMH,EACN4B,MAAOA,GCoC0BP,CAAYO,QAIpCJ,CAA6CpB,G,wBChC/CyB,G,OArBD,SAACpB,GAEX,IAAQqB,EAA4BrB,EAA5BqB,SAAUC,EAAkBtB,EAAlBsB,cAElB,OAEI,sBAAKxC,UAAU,QAAf,UACI,wBAAQA,UAAU,UAAUyC,QAAS,kBAAKF,GAAS,EAAO,OAA1D,iBAEA,qBAAKvC,UAAU,uBAAf,SACI,uCAAUwC,EAAV,0BAGJ,sBAAKxC,UAAU,sBAAf,UACI,uBAAOA,UAAU,eAAeY,KAAK,SAAS6B,QAAS,kBAAKF,GAAS,EAAO,OAAOG,MAAM,WACzF,uBAAO1C,UAAU,eAAeY,KAAK,SAAS+B,SAA4B,IAAlBH,EAAqBC,QAAS,kBAAKF,GAAS,GAAO,IAAQG,MAAM,iB,iBCF1H,M,kFAdX,WACI,MAAO,Q,kBAIX,SAAKE,GAID,OAAOvC,EAAKwC,KAAL,yBAA4BD,Q,MCCrCE,E,kDACF,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IAcV6B,QAAU,IAfS,EAqBnBd,QAAU,WACN,IAEIe,EAFAC,EAAK,IAAIC,UAAU,0BACnBC,EAAI,eAIRF,EAAGG,OAAS,WACR5B,QAAQC,IAAI,sCAEZ,EAAK4B,SAAS,CAAEJ,GAAIA,IAEpBE,EAAKJ,QAAU,IACfO,aAAaN,IAIjBC,EAAGM,QAAU,SAAAC,GACThC,QAAQC,IAAR,2DACwDgC,KAAKC,IACrD,IACCP,EAAKJ,QAAUI,EAAKJ,SAAW,KAHxC,YAKIS,EAAEG,QAGNR,EAAKJ,QAAUI,EAAKJ,QAAUI,EAAKJ,QACnCC,EAAkBY,WAAW,EAAKC,MAAOJ,KAAKC,IAAI,IAAOP,EAAKJ,WAIlEE,EAAGa,QAAU,SAAAvC,GACTC,QAAQuC,MACJ,6BACAxC,EAAIyC,QACJ,kBAGJf,EAAGgB,SAIPhB,EAAGiB,UAAY,SAACC,EAAO5C,GACnBC,QAAQC,IAAI,CAAC0C,QAAO5C,QACpB,EAAKL,MAAMkD,qBAAqB,CAC5BxD,KAAM,0BACNyD,MAAQ,MAlED,EA0EnBR,MAAQ,WACJ,IAAQZ,EAAO,EAAKf,MAAZe,GACHA,GAAMA,EAAGqB,YAAcpB,UAAUqB,QAAS,EAAKtC,WA5ErC,EA+EnBuC,YAAc,SAACC,EAAW5B,GAOtB,GANwB,mBAAd4B,EACN,EAAKpB,SAAS,CAACqB,MAAOD,IAEtB,EAAKpB,SAAS,CAACqB,OAAQ,EAAKxC,MAAMwC,QAGnB,mBAAT7B,IAA+B,IAATA,EAAc,CAE1C,IAAI8B,EAAiB,EAAKzD,MAAMQ,OAAOkD,QAAO,SAAAzC,GAAK,OAAIA,EAAM0C,cAE7D,GAAGF,GAAkBA,EAAeG,OAAS,EAAE,CAC3C,EAAK5D,MAAMkD,qBAAqB,CAC5BxD,KAAM,mBACNyD,MAAOM,EAAeG,SAG1BC,IAAMC,KAAK,kCAEX,IAAIC,EAAWN,EAAeO,KAAI,SAAA/C,GAC9B,OAAOgD,EAAmBtC,KAAKV,EAAMS,OAGzCwC,QAAQC,WAAWJ,GAClBjE,MAAK,SAACsE,GACHA,EAAQC,SAAQ,SAAAC,GACZ,GAAsB,aAAlBA,EAAOC,OAAuB,CAAC,IAAD,MAMW,MAAzC,GALA,EAAKvE,MAAMkD,qBAAqB,CAC5BxD,KAAM,0BACNyD,MAAQ,IAGZ,OAAGmB,QAAH,IAAGA,GAAH,UAAGA,EAAQ7B,cAAX,iBAAG,EAAgB+B,gBAAnB,iBAAG,EAA0BtE,YAA7B,aAAG,EAAgC2C,MAC/BgB,IAAMhB,MAAN,OAAYyB,QAAZ,IAAYA,GAAZ,UAAYA,EAAQ7B,cAApB,iBAAY,EAAgB+B,gBAA5B,iBAAY,EAA0BtE,YAAtC,aAAY,EAAgC2C,YAE5CgB,IAAMhB,MAAM,6BAA8B,CAAC4B,UAAW,MAE1DnE,QAAQuC,MAAM,CAACyB,qBAjHnC,EAAKtD,MAAQ,CACTe,GAAI,KACJyB,OAAO,GALI,E,qDAWnB,WACI/C,KAAKM,Y,oBAgHT,WACI,OACI,gCACI,cAAC,IAAD,CAAiB2D,KAAMC,IAAUC,KAAK,KAAKC,MAAM,2BAA2BtD,QAASd,KAAK6C,cACzF7C,KAAKO,MAAMwC,OAAS,cAAC,EAAD,CAAOlC,cAAeb,KAAKT,MAAMsB,cAAeD,SAAUZ,KAAK6C,qB,GAjI9ExC,aAwJPC,eAdS,SAAAC,GACpB,MAAO,CACLM,cAAeN,EAAMC,MAAMK,cAC3Bd,OAAQQ,EAAMC,MAAMT,WAIC,SAAAU,GACvB,MAAO,CACHgC,qBAAuB,SAAC4B,GAAD,OAAY5D,EJ1IhC,CACHxB,KAAMF,EACNuF,QIwIiED,KACjErF,cAAe,kBAAMyB,EAASzB,SAIvBsB,CAA6Ca,GC1JtDoD,G,yDAEF,aAAe,wC,0CAIf,WACI,OACI,qBAAKlG,UAAU,SAAf,SACI,sBAAKA,UAAU,uBAAf,UACI,cAAC,IAAD,CAAiB4F,KAAMO,IAASL,KAAK,KAAKC,MAAM,kBAAkBtD,QAASd,KAAKT,MAAMP,gBACtF,8BACI,+BAEsC,IAA7BgB,KAAKT,MAAMsB,cAAuB,oBACL,IAA7Bb,KAAKT,MAAMsB,eAAuB,qBAClCb,KAAKT,MAAMsB,cAAgB,uBAIxC,sBAAKxC,UAAU,sBAAf,UACI,cAAC,EAAD,CAASwC,cAAeb,KAAKT,MAAMsB,gBACnC,cAAC,IAAD,CAAiBoD,KAAMQ,IAASN,KAAK,KAAKC,MAAM,yC,GAtBnD/D,cA4CJC,eAZO,SAAAC,GACpB,MAAO,CACLM,cAAeN,EAAMC,MAAMK,kBAIJ,SAAAJ,GACzB,MAAO,CACHzB,cAAe,kBAAMyB,EAASzB,SAIrBsB,CAA6CiE,GClDxDG,G,yDAEF,aAAe,wC,0CAIf,WACI,OACI,8BACK1E,KAAKT,MAAMkD,qBAAuB,GAAK,qBAAKpE,UAAU,YAAf,SAA2B,gC,GATrDgC,cAwBfC,eANS,SAAAC,GACpB,MAAO,CACHkC,qBAAsBlC,EAAMC,MAAMiC,wBAI3BnC,CAAyBoE,GCKzBC,G,yDApBb,aAAe,wC,0CAIf,WACE,OACE,sBAAKtG,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IAEA,cAAC,IAAD,CAAgB2F,UAAW,a,GAdjBY,IAAMvE,Y,gBCTlBwE,EAAgB,CAClB9E,OAAQ,GACRc,cAAe,EACf4B,qBAAsB,GA0EXqC,EAvEC,WAAoC,IAAnCvE,EAAkC,uDAA1BsE,EAAeR,EAAW,uCAE/C,OAAQA,EAAOpF,MAEX,KAAKL,EACD,OAAO,2BACA2B,GADP,IAEIR,OAAQsE,EAAOtE,OACfc,cAAewD,EAAOtE,OAAOkD,QAAO,SAAAzC,GAAK,OAAIA,EAAM0C,cAAYC,SAGvE,KAAKtE,EAED,OAAO,2BACA0B,GADP,IAEIR,OAAQQ,EAAMR,OAAOwD,KAAI,SAAA/C,GAIrB,OAHyB,IAArBA,EAAM0C,aACN1C,EAAM0C,YAAa,GAEhB1C,KAEXK,cAAe,IAIvB,KAAK/B,EACD,IAAIiB,EAASQ,EAAMR,OAAOgF,QACtBvE,EAAQD,EAAMR,OAAOsE,EAAO3D,OAKhC,OAHIsE,OAAOC,UAAUC,eAAeC,KAAK3E,EAAO,cAAiBA,EAAM0C,YAAc1C,EAAM0C,WACpF1C,EAAM0C,YAAa,EAEnB,2BACA3C,GADP,IAEIR,OAAQA,EACRc,cAAed,EAAOkD,QAAO,SAAAzC,GAAK,OAAIA,EAAM0C,cAAYC,SAIhE,KAAKpE,EACD,IAAI2D,EAAQnC,EAAMkC,qBAmBlB,MAlB4B,qBAAxB4B,EAAOC,QAAQrF,KACfyD,GAAS2B,EAAOC,QAAQ5B,MAExBA,GAAS2B,EAAOC,QAAQ5B,MAGd,IAAVA,IACAA,EAAQ,EACRnC,EAAMR,OAASQ,EAAMR,OAAOwD,KAAI,SAAA/C,GAI5B,OAHyB,IAArBA,EAAM0C,aACN1C,EAAM0C,YAAa,GAEhB1C,KAEXD,EAAMM,cAAgB,EACtBuC,IAAMgC,QAAQ,wBAGX,2BACA7E,GADP,IAEIkC,qBAAsBC,IAI9B,QAAS,OAAOnC,ICnET8E,EAJKC,YAAgB,CAChC9E,MAAO+E,I,QCIIC,EATA,SAAAC,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAArB,GAC5BxE,QAAQ8F,MAAMtB,EAAOpF,MACrBY,QAAQ+F,KAAK,cAAevB,GAC5B,IAAIR,EAAS6B,EAAKrB,GAGlB,OAFAxE,QAAQC,IAAI,aAAc2F,EAAMI,YAChChG,QAAQiG,WACDjC,KCILkC,EAAqBC,YAAgBC,EAAkBC,KACvDC,EAAoBC,YAAQL,GASnBN,EAPDY,YAAYhB,OAAaiB,EAAWH,GCLlDI,IAASC,OACP,cAAC,IAAMC,SAAP,UACE,cAAC,IAAD,CAAUhB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJiB,SAASC,eAAe,U","file":"static/js/main.18d827d9.chunk.js","sourcesContent":["import React from 'react';\n\nimport './homepage.styles.scss';\n\nconst HomePage = () => (\n  <div className='homepage'>\n    <h1>\n        CrowdRiff : Photo Gallery\n    </h1>\n    <p>\n      made with ❤️ by Jatinder bhola (JatinderBhola@gmail.com)\n    </p>\n  </div>\n);\n\nexport default HomePage;","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"http://localhost:3001/\",\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n});","import http from '../http-common';\n\nclass PhotoDataService {\n\n    getAll() {\n        return http.get(\"/photos\");\n    }\n\n}\n\nexport default new PhotoDataService();","\nexport const SET_IMAGES = 'SET_IMAGES';\nexport const CLEAR_SELECTED = 'CLEAR_SELECTED';\nexport const SET_SELECTED = 'SET_SELECTED';\nexport const PENDING_IMAGE_APPROVAL = 'PENDING_IMAGE_APPROVAL';","import { SET_IMAGES, CLEAR_SELECTED, SET_SELECTED, PENDING_IMAGE_APPROVAL } from './image.types';\n\nexport const setImages = (images) => {\n    return {\n        type: SET_IMAGES,\n        images: images\n    };\n};\n\nexport const clearSelected = () => {\n    return {\n        type: CLEAR_SELECTED,\n    };\n};\n\nexport const setSelected = (index) => {\n    return {\n        type: SET_SELECTED,\n        index: index\n    };\n};\n\nexport const pendingImageApproval = (process) => {\n    return {\n        type: PENDING_IMAGE_APPROVAL,\n        process: process\n    };\n};","/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport PhotoDataService from \"./../../services/PhotoDataService\";\nimport Gallery from 'react-grid-gallery';\n\nimport './photo-gallery-grid.style.scss';\n\nimport { connect } from \"react-redux\";\n\nimport {\n    setImages,\n    setSelected\n} from \"./../../redux/Image/image.actions\";\n\nclass PhotoGalleryGrid extends Component {\n\n    constructor() {\n        super();\n    }\n\n    componentDidMount() {\n        PhotoDataService.getAll()\n            .then(res => {\n                this.props.setImages(res.data.photos);\n            })\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        return (\n            <div className=\"image-grid\">\n                <Gallery\n                images={this.props.images}\n                backdropClosesModal={true}\n                className=\"image\"\n                onSelectImage={this.props.setSelected}\n                lightboxWidth={1536}\n                />\n            </div>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = state => {\n    return {\n        images: state.image.images\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {\n        setImages: (images) => dispatch(setImages(images)),\n        setSelected: (index) => dispatch(setSelected(index))\n    }\n  }\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(PhotoGalleryGrid)","import React from 'react';\n// styling\nimport './popup.style.scss';\n\n/* eslint-disable react/prop-types */\nconst PopUp = (props) => {\n    // function that takes boolean as param to conditionally display popup\n    const { setPopUp, selectedCount } = props \n\n    return (\n        \n        <div className=\"PopUp\">\n            <button className=\"popup-x\" onClick={()=> setPopUp(false, null)}> x </button>\n\n            <div className=\"pu-content-container\">\n                <h1>Send {selectedCount} photos to website</h1>\n            </div>\n\n            <div className=\"pu-button-container\">\n                <input className=\"button-style\" type=\"button\" onClick={()=> setPopUp(false, null)} value=\"Cancel\" />\n                <input className=\"button-style\" type=\"button\" disabled={selectedCount === 0} onClick={()=> setPopUp(false, true)}  value=\"send\" />\n            </div>\n        </div>\n    );\n}\n\nexport default PopUp;","import http from '../http-common';\n\nclass WebsiteDateService {\n\n    get host() {\n        return \"/ws\";\n    }\n\n\n    post(id) {\n        // if (typeof id === null) {\n        //     Promise.reject(new Error('photo id is missing in the request'));\n        // }\n        return http.post(`website/photos/${id}`);\n    }\n\n}\n\nexport default new WebsiteDateService();","/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShare } from '@fortawesome/fontawesome-free-solid';\nimport { connect } from \"react-redux\";\nimport PopUp from '../popup-model/popup.component';\nimport './share-me.style.scss';\nimport { toast } from \"react-toastify\";\nimport {\n    clearSelected,\n    pendingImageApproval\n} from \"../../redux/Image/image.actions\";\nimport WebsiteDateService from '../../services/WebsiteDateService';\n\nclass ShareMe extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            ws: null,\n            popUp: false\n        };\n    }\n\n    // single websocket instance for the own application and constantly trying to reconnect.\n\n    componentDidMount() {\n        this.connect();\n    }\n\n    timeout = 250; // Initial timeout duration as a class variable\n\n    /**\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures constant reconnection if connection closes\n     */\n    connect = () => {\n        var ws = new WebSocket(\"ws://localhost:3001/ws\");\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n\n            this.setState({ ws: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n            \n            ws.close();\n        };\n\n        // websocket onerror event listener\n        ws.onmessage = (event, err) => {\n            console.log({event, err});\n            this.props.pendingImageApproval({\n                type: 'reset-upload-count-by-1',\n                count : 1\n            })\n        };\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    check = () => {\n        const { ws } = this.state;\n        if (!ws || ws.readyState == WebSocket.CLOSED) {this.connect();} //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    togglePopUp = (isVisible, post) => {\n        if(typeof isVisible === 'boolean'){\n            this.setState({popUp: isVisible})\n        }else{\n            this.setState({popUp: !this.state.popUp})\n        }\n\n        if(typeof post === 'boolean' && post === true){\n            // post images\n            let selectedImages = this.props.images.filter(image => image.isSelected);\n            \n            if(selectedImages && selectedImages.length > 0){\n                this.props.pendingImageApproval({\n                    type: 'set-upload-count',\n                    count: selectedImages.length\n                })\n\n                toast.warn(\"Uploading images for approval!\");\n\n                let promises = selectedImages.map(image => {\n                    return WebsiteDateService.post(image.id);\n                })\n\n                Promise.allSettled(promises)\n                .then((results)=> {\n                    results.forEach(result => {\n                        if (result.status === \"rejected\") {\n                            this.props.pendingImageApproval({\n                                type: 'reset-upload-count-by-1',\n                                count : 1\n                            })\n\n                            if(result?.reason?.response?.data?.error){\n                                toast.error(result?.reason?.response?.data?.error);\n                            }else{\n                                toast.error(\"Photo is already uploaded!\", {autoClose: 5000});\n                            }\n                            console.error({result});\n                        }\n                    });\n                })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <FontAwesomeIcon icon={faShare}  size=\"lg\" title=\"post images for approval\" onClick={this.togglePopUp} />\n                {this.state.popUp && <PopUp selectedCount={this.props.selectedCount} setPopUp={this.togglePopUp} />}\n            </div>\n        )\n    }\n\n}\n\n\n\nconst mapStateToProps = state => {\n    return {\n      selectedCount: state.image.selectedCount,\n      images: state.image.images\n    }\n}\n  \nconst mapDispatchToProps = dispatch => {\n    return {\n        pendingImageApproval : (action) => dispatch(pendingImageApproval(action)),\n        clearSelected: () => dispatch(clearSelected())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShareMe)","/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faUser } from '@fortawesome/fontawesome-free-solid';\nimport { connect } from \"react-redux\";\nimport ShareMe from '../share-me/share-me.component';\n\nimport './footer.style.scss';\nimport {\n    clearSelected\n} from \"./../../redux/Image/image.actions\";\n\nclass Footer extends Component {\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <div className=\"footer\">\n                <div className=\"child-section margin\">\n                    <FontAwesomeIcon icon={faTimes} size=\"lg\" title=\"clear selection\" onClick={this.props.clearSelected} />\n                    <div> \n                        <div>\n                            { \n                                (this.props.selectedCount === 0 && \"No Image Selected\") ||\n                                (this.props.selectedCount === 1 && \"1 Image Selected\") ||\n                                (this.props.selectedCount + \" Images Selected\")\n                            }\n                        </div>\n                    </div>\n                    <div className=\"child-section width\">\n                        <ShareMe selectedCount={this.props.selectedCount} />\n                        <FontAwesomeIcon icon={faUser}  size=\"lg\" title=\"post images for approval\" />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = state => {\n    return {\n      selectedCount: state.image.selectedCount\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {\n        clearSelected: () => dispatch(clearSelected()),\n    }\n  }\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(Footer)","/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\nimport './spinner-with-love.style.scss';\n\nclass SpinnerWithLove extends Component {\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.pendingImageApproval > 0 && <div className=\"lds-heart\"><div></div></div>}\n                \n            </div>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = state => {\n    return {\n        pendingImageApproval: state.image.pendingImageApproval\n    }\n}\n\nexport default connect(mapStateToProps)(SpinnerWithLove)","//@ts-check\nimport React from \"react\";\n\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport PhotoGalleryGrid from \"./components/photo-gallery-grid/photo-gallery-grid.component\";\nimport Footer from './components/footer/footer.component';\nimport SpinnerWithLove from \"./components/spinner/spinner-with-love.component\";\n\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n\n/* eslint-disable react/prop-types */\nclass App extends React.Component {\n\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <HomePage />\n        <PhotoGalleryGrid />\n        <Footer />\n        <SpinnerWithLove />\n\n        <ToastContainer autoClose={2000} />\n      </div>\n    );\n  }\n}\n\n\n\nexport default App\n\n\n\n\n","import { SET_IMAGES, CLEAR_SELECTED, SET_SELECTED, PENDING_IMAGE_APPROVAL } from './image.types';\nimport { toast } from \"react-toastify\";\n\n\nconst INITIAL_STATE = {\n    images: [],\n    selectedCount: 0,\n    pendingImageApproval: 0\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n\n    switch (action.type) {\n\n        case SET_IMAGES:\n            return {\n                ...state,\n                images: action.images,\n                selectedCount: action.images.filter(image => image.isSelected).length\n            };\n\n        case CLEAR_SELECTED:\n            // clear selected from array\n            return {\n                ...state,\n                images: state.images.map(image => {\n                    if (image.isSelected === true) {\n                        image.isSelected = false;\n                    }\n                    return image;\n                }),\n                selectedCount: 0\n\n            };\n\n        case SET_SELECTED:\n            var images = state.images.slice();\n            var image = state.images[action.index];\n\n            if (Object.prototype.hasOwnProperty.call(image, \"isSelected\")) { image.isSelected = !image.isSelected; }\n            else { image.isSelected = true; }\n\n            return {\n                ...state,\n                images: images,\n                selectedCount: images.filter(image => image.isSelected).length\n\n            };\n\n        case PENDING_IMAGE_APPROVAL:\n            var count = state.pendingImageApproval;\n            if (action.process.type === 'set-upload-count') {\n                count += action.process.count;\n            } else {\n                count -= action.process.count;\n            }\n\n            if (count === 0) {\n                count = 0;\n                state.images = state.images.map(image => {\n                    if (image.isSelected === true) {\n                        image.isSelected = false;\n                    }\n                    return image;\n                })\n                state.selectedCount = 0;\n                toast.success(\"Approval completed!\");\n            }\n\n            return {\n                ...state,\n                pendingImageApproval: count\n\n            };\n\n        default: return state;\n\n    }\n\n};\n\nexport default reducer;","import { combineReducers } from 'redux';\n\nimport imageReducer from './Image/image.reducer';\n\nconst rootReducer = combineReducers({\n    image: imageReducer\n});\n\nexport default rootReducer;","const logger = store => next => action => {\n    console.group(action.type);\n    console.info('dispatching', action);\n    let result = next(action);\n    console.log('next state', store.getState());\n    console.groupEnd();\n    return result;\n}\n\nexport default logger;","\nimport rootReducer from './rootReducers';\n\n// redux\nimport { applyMiddleware, createStore, compose } from 'redux';\n\n// middleware\nimport thunkMiddleware from 'redux-thunk';\nimport loggerMiddleware from '../middleware/logger';\n\nconst middlewareEnhancer = applyMiddleware(loggerMiddleware, thunkMiddleware);\nconst composedEnhancers = compose(middlewareEnhancer);\n\nconst store = createStore(rootReducer, undefined, composedEnhancers);\n\n\n\n// import { configureStore } from '@reduxjs/toolkit';\n// import counterReducer from '../features/counter/counterSlice';\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <React.Fragment>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}